1 Bank.sol
mapping (address => uint256) public balances;
function recharge() payable
balances[msg.sender]+=msg.value;
function withdraw()
require(msg.sender.call.value(balances[msg.sender])());
balances[msg.sender]=0;
1
---------------------------------
2 dumbDAO.sol
mapping (address => uint) public balances;
function buyTokens()
balances[msg.sender] += msg.value;
TokensBought(msg.sender, msg.value);
if (balances[msg.sender] < _amount)
balances[_to]=_amount;
balances[msg.sender]-=_amount;
TokensTransfered(msg.sender, _to, _amount);
function withdraw(address _recipient) returns (bool)
if (balances[msg.sender] == 0){
InsufficientFunds(balances[msg.sender],balances[msg.sender]);}
PaymentCalled(_recipient, balances[msg.sender]);
if (_recipient.call.value(balances[msg.sender])())
balances[msg.sender] = 0;
1
---------------------------------
3 EtherStore.sol
mapping(address => uint256) public balances;
function depositFunds() public payable
balances[msg.sender] += msg.value;
function withdrawFunds (uint256 _weiToWithdraw) public
require(balances[msg.sender] >= _weiToWithdraw);
require(_weiToWithdraw <= withdrawalLimit);
require(msg.sender.call.value(_weiToWithdraw)());
balances[msg.sender] -= _weiToWithdraw;
1
---------------------------------
4 PrivateBank.sol
function Deposit() public payable
if(msg.value >= MinDeposit)
balances[msg.sender]+=msg.value;
TransferLog.AddMessage(msg.sender,msg.value,"Deposit");
function CashOut(uint _am)
if(_am<=balances[msg.sender])
if(msg.sender.call.value(_am)())
balances[msg.sender]-=_am;
TransferLog.AddMessage(msg.sender,_am,"CashOut");
1
---------------------------------
5 Reentrance1.sol
function addToBalance() payable
userBalance[msg.sender] += msg.value;
function withdrawBalance()
if(!(msg.sender.call.value(userBalance[msg.sender])()))
userBalance[msg.sender] = 0;
function withdrawBalance_fixed()
uint amount = userBalance[msg.sender];
userBalance[msg.sender] = 0;
if(!(msg.sender.call.value(amount)()))
1
---------------------------------
6 ReentranceExploit.sol
address public vulnerable_contract;
function deposit(address _vulnerable_contract) public payable
vulnerable_contract = _vulnerable_contract;
require(vulnerable_contract.call.value(msg.value)(bytes4(sha3("addToBalance()"))));
require(vulnerable_contract.call(bytes4(sha3("withdrawBalance()"))));
function () public payable
require(vulnerable_contract.call(bytes4(sha3("withdrawBalance()"))));
1
---------------------------------
7 Reentrance.sol
mapping(address => uint) public balances;
function donate(address _to) public payable
balances[_to] += msg.value;
function withdraw(uint _amount) public
if(balances[msg.sender] >= _amount)
if(msg.sender.call.value(_amount)())
 _amount;
balances[msg.sender] -= _amount;
1
---------------------------------
8 SendBalance.sol
mapping ( address => uint ) userBalances ;
function getBalance ( address u) constant returns ( uint )
return userBalances [u];
function addToBalance ()
userBalances [msg . sender ] += msg . value ;
function withdrawBalance ()
if (!( msg . sender . call . value (userBalances [msg . sender ])()))
userBalances [msg . sender ] = 0;
1
---------------------------------
9 simple_dao.sol
mapping (address => uint) public credit;
function donate(address to) payable public
credit[to] += msg.value;
function withdraw(uint amount) public
if (credit[msg.sender]>= amount)
require(msg.sender.call.value(amount)());
credit[msg.sender]-=amount;
1
---------------------------------
10 simple_fixed.sol
mapping (address => uint) public credit;
function donate(address to) payable public
credit[to] += msg.value;
function withdraw(uint amount) public
if (credit[msg.sender]>= amount)
credit[msg.sender]-=amount;
require(msg.sender.call.value(amount)());
1
---------------------------------
11 Victim.sol
function withdraw()
uint transferAmt = 1 ether; 
if (!msg.sender.call.value(transferAmt)()) throw; 
1
---------------------------------








